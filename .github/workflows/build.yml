name: Wheels

on:
  workflow_call:

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.QUANTANIUM_READ_PAT }}

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.5
      id: install-boost
      with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.86.0

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: AMD64
          - os: ubuntu-latest
            arch: x86_64
          - os: macos-13
            arch: x86_64
          - os: macos-13-xlarge
            arch: arm64
          - os: macos-14
            arch: arm64
    #  matrix:  # IMPORTANT: macos-13 is an intel runner, macos-14 is apple silicon
    #    os: [windows-latest, ubuntu-latest, macos-13, macos-14]    # [ubuntu-latest, macos-13]#, 
 
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        token: ${{ secrets.QUANTANIUM_READ_PAT }}
        
    - name: Check Architecture
      run: |
        set -x
        echo "Detected architecture:"
        uname -m
        set +x
      shell: bash

    - name: Install Boost (Cross-OS)
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt update && sudo apt install -y libboost-all-dev protobuf-compiler libprotobuf-dev 
        elif [[ "${{ matrix.os }}" == "macos-*" ]]; then
          brew install boost gcc llvm libomp 
        # elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then

        fi
      shell: bash

    # - name: Export macOS target >= 13.0
    #   if: startsWith(matrix.os, 'macos-13') || matrix.os == 'macos-14'
    #   run: |
    #     echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
    #     echo "BOOST_ROOT=$(brew --prefix boost)"      >> $GITHUB_ENV

    - name: Install Boost on Windows via vcpkg
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path 'C:\vcpkg') {
          Remove-Item -Recurse -Force 'C:\vcpkg'
        }
  
        git clone https://github.com/microsoft/vcpkg.git 'C:\vcpkg'
        Set-Location 'C:\vcpkg'
        .\bootstrap-vcpkg.bat

        if (-Not (Test-Path 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake')) {
          Write-Host 'ERROR: vcpkg.cmake not found!'
          exit 1
        }

        .\vcpkg.exe install protobuf:x64-windows
        .\vcpkg.exe install boost-program-options:x64-windows
        .\vcpkg.exe install boost-serialization:x64-windows
        .\vcpkg.exe install boost-log:x64-windows

      shell: pwsh
   
    - name: Check Submodule Commits 
      run: |
        echo "Submodule commits AFTER update:"
        git submodule status
 

    - uses: pypa/cibuildwheel@v2.22
      env:
        CIBW_ENABLE: cpython-prerelease
        CIBW_SKIP: cp*-musllinux* cp*-win_arm64*
        CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
        CIBW_BUILD_VERBOSITY: 3
        CIBW_ARCHS_WINDOWS: AMD64 #auto ARM64
        CIBW_ARCHS_LINUX: x86_64 #"auto aarch64" #x86_64 # On an Linux Intel runner, build Intel and ARM wheels
        #CIBW_ARCHS_MACOS: arm64 #x86_64    # x86_64 #universal2 
        #CIBW_PLATFORM_TAG_MACOS: "macosx_14_0" #"macosx_13_0"
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_PLATFORM_TAG_MACOS: ${{ matrix.os == 'macos-14' && 'macosx_14_0' || 'macosx_13_0' }}




        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:/Windows/System32 --add-path C:/vcpkg/installed/x64-windows/bin -w {dest_dir} {wheel}"
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-wheel --lib-path /Users/runner/protobuf3/lib -w {dest_dir} -v {wheel}"

      #  CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || '' }}
        CMAKE_ARGS:                  ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows' || '' }}
        CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || (matrix.os == 'macos-13' || matrix.os == 'macos-14'|| matrix.os == 'macos-13-xlarge') && '-DProtobuf_ROOT=/Users/runner/protobuf3 -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf3/include -DProtobuf_LIBRARIES=/Users/runner/protobuf3/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf3/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf3' || '' }}


        CIBW_ENVIRONMENT_WINDOWS: |
          BOOST_ROOT=C:/vcpkg/installed/x64-windows
          BOOST_INCLUDEDIR=C:/vcpkg/installed/x64-windows/include
          BOOST_LIBRARYDIR=C:/vcpkg/installed/x64-windows/lib

        # CIBW_BEFORE_ALL_MACOS: |
        #     # OpenMP dependencies for MacOS
        #     set -x
        #     echo "---------------------DEBUG------------------------------"
        #     brew update
        #     brew install gcc llvm libomp 
        #     brew uninstall protobuf
        #     brew install protobuf@3
        #     brew link --force protobuf@3
        #     brew install boost
        #     brew link --force boost
        #     brew list
        #     DETECTED_ARCH=$(uname -m)
        #     echo "Detected architecture: $DETECTED_ARCH"
         
        #     export BOOST_ROOT=$(brew --prefix boost)
        #     export CXXFLAGS="-I$BOOST_ROOT/include -I$(brew --prefix protobuf)/include"
        #     export LDFLAGS="-L$BOOST_ROOT/lib -L$(brew --prefix protobuf)/lib"
        #     # export CXXFLAGS="-I$(brew --prefix protobuf)/include"
        #     # export LDFLAGS="-L$(brew --prefix protobuf)/lib"
        #     echo "Protobuf installed at $(brew --prefix protobuf)"
        #     protoc --version
        #     echo "--------------------END DEBUG --------------------------"	
        #     set +x
            
        CIBW_BEFORE_ALL_MACOS: |
            # OpenMP dependencies for MacOS
            set -x
            echo "---------------------DEBUG------------------------------"
            brew update
            brew install gcc llvm libomp 
            brew uninstall protobuf
            git clone -b v3.21.12 https://github.com/protocolbuffers/protobuf.git
            cd protobuf

            git submodule update --init --recursive
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=/Users/runner/protobuf3 \
                -DBUILD_SHARED_LIBS=ON \
                -Dprotobuf_BUILD_TESTS=OFF \
                -Dprotobuf_BUILD_PROTOC_BINARIES=ON \
                -Dprotobuf_INSTALL=ON \
                -DCMAKE_INSTALL_LIBDIR=lib
            make -j2
            make install
          
            brew install boost
            brew link --force boost
            brew list
            DETECTED_ARCH=$(uname -m)
            echo "Detected architecture: $DETECTED_ARCH"
         
            export BOOST_ROOT=$(brew --prefix boost)
            export CXXFLAGS="-I$BOOST_ROOT/include -I/Users/runner/protobuf3/include"
            export LDFLAGS="-L$BOOST_ROOT/lib -L/Users/runner/protobuf3/lib"
            # export CXXFLAGS="-I$(brew --prefix protobuf)/include"
            # export LDFLAGS="-L$(brew --prefix protobuf)/lib"
            echo "Protobuf installed at $(brew --prefix protobuf)"
            protoc --version
            echo "--------------------END DEBUG --------------------------"	
            set +x
        
        # CIBW_BEFORE_BUILD_MACOS: |
        #     mkdir -p build &&
        #     cd build &&
        #     cmake .. -DCMAKE_PREFIX_PATH=/Users/runner/protobuf3 -DProtobuf_ROOT=/Users/runner/protobuf3 -DCMAKE_INCLUDE_PATH=/Users/runner/protobuf3/include -DCMAKE_LIBRARY_PATH=/Users/runner/protobuf3/lib &&
        #     make -j2 &&
        #     cd ..


        CIBW_BEFORE_ALL_LINUX: |
          # Install Boost
          set -x
          yum install -y epel-release autoconf automake libtool gcc gcc-c++ make unzip wget &&
          #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.tar.gz &&
          wget -O boost_1_86_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download &&
          tar -xzf boost_1_86_0.tar.gz &&
          cd boost_1_86_0 &&
          ./bootstrap.sh &&
          ./b2 install &&
          cd .. &&
          # Install dependencies using yum
          
          export CMAKE_CXX_STANDARD=20 &&
          # Download and build Protobuf
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip &&
          unzip protoc-21.12-linux-x86_64.zip -d /usr/local/ &&
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz &&
          tar -xzf protobuf-all-21.12.tar.gz &&
          cd protobuf-21.12 &&
          ./configure  &&
          make -j$(nproc) &&
          make install &&
          export PATH="/usr/local/bin:$PATH" &&
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" &&
          export CMAKE_PREFIX_PATH="/usr/local" &&
          ldconfig &&
          # Debug Protobuf installation
          protoc --version || echo "Protoc not found"
          ls /usr/local/include/google/protobuf || echo "Protobuf headers not found"
          ls /usr/local/lib | grep protobuf || echo "Protobuf libraries not found"
          set +x
        CIBW_BUILD_FRONTEND: build
        CMAKE_CXX_STANDARD: 20
        #CIBW_ENVIRONMENT_MACOS: BOOST_ROOT=$BOOST_ROOT #BOOST_ROOT='${{ steps.install-boost.outputs.BOOST_ROOT }}' #MACOSX_DEPLOYMENT_TARGET=14.0
        CIBW_ENVIRONMENT_MACOS: |
          BOOST_ROOT='${{ steps.install-boost.outputs.BOOST_ROOT }}' 
          MACOSX_DEPLOYMENT_TARGET=${{ matrix.os == 'macos-14' && '14.0' || '13.0' }}
          SKBUILD_CMAKE_ARGS=-DProtobuf_ROOT=/Users/runner/protobuf3 -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf3/include -DProtobuf_LIBRARIES=/Users/runner/protobuf3/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf3/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf3


    - name: Verify clean directory
      run: git diff --exit-code --ignore-submodules
      shell: bash

    # - uses: actions/upload-artifact@v4
    #   with:
    #     name: cibw-wheels-${{ matrix.os }}
    #     path: wheelhouse/*.whl
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}
        path: wheelhouse/*.whl
# name: Wheels

# on:
#   workflow_call:

# env:
#   FORCE_COLOR: 3

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# jobs:
#   build_sdist:
#     name: Build SDist
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v4
#       with:
#         submodules: recursive
#         token: ${{ secrets.QUANTANIUM_READ_PAT }}

#     - name: Install boost
#       uses: MarkusJx/install-boost@v2.4.5
#       id: install-boost
#       with:
#           # REQUIRED: Specify the required boost version
#           # A list of supported versions can be found here:
#           # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
#           boost_version: 1.86.0

#     - name: Build SDist
#       run: pipx run build --sdist

#     - name: Check metadata
#       run: pipx run twine check dist/*

#     - uses: actions/upload-artifact@v4
#       with:
#         name: cibw-sdist
#         path: dist/*.tar.gz


#   build_wheels:
#     name: Wheels on ${{ matrix.os }}
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - os: windows-latest
#             arch: AMD64
#           - os: ubuntu-latest
#             arch: x86_64
#           - os: macos-13
#             arch: x86_64
#           - os: macos-13
#             arch: arm64
#           - os: macos-14
#             arch: arm64
#     #  matrix:  # IMPORTANT: macos-13 is an intel runner, macos-14 is apple silicon
#     #    os: [windows-latest, ubuntu-latest, macos-13, macos-14]    # [ubuntu-latest, macos-13]#, 
 
#     steps:
#     - uses: actions/checkout@v4
#       with:
#         submodules: recursive
#         fetch-depth: 0
#         token: ${{ secrets.QUANTANIUM_READ_PAT }}
        
#     - name: Check Architecture
#       run: |
#         set -x
#         echo "Detected architecture:"
#         uname -m
#         set +x
#       shell: bash

#     - name: Install Boost (Cross-OS)
#       run: |
#         if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
#           sudo apt update && sudo apt install -y libboost-all-dev protobuf-compiler libprotobuf-dev 
#         elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
#           brew install boost gcc llvm libomp
#         # elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then

#         fi
#       shell: bash

#     - name: Install Boost on Windows via vcpkg
#       if: matrix.os == 'windows-latest'
#       run: |
#         if (Test-Path 'C:\vcpkg') {
#           Remove-Item -Recurse -Force 'C:\vcpkg'
#         }
  
#         git clone https://github.com/microsoft/vcpkg.git 'C:\vcpkg'
#         Set-Location 'C:\vcpkg'
#         .\bootstrap-vcpkg.bat

#         if (-Not (Test-Path 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake')) {
#           Write-Host 'ERROR: vcpkg.cmake not found!'
#           exit 1
#         }

#         .\vcpkg.exe install protobuf:x64-windows
#         .\vcpkg.exe install boost-program-options:x64-windows
#         .\vcpkg.exe install boost-serialization:x64-windows
#         .\vcpkg.exe install boost-log:x64-windows

#       shell: pwsh
   
#     - name: Check Submodule Commits 
#       run: |
#         echo "Submodule commits AFTER update:"
#         git submodule status

        
#     - uses: pypa/cibuildwheel@v2.22
#       env:
#         CIBW_ENABLE: cpython-prerelease
#         CIBW_SKIP: cp*-musllinux* cp*-win_arm64*
#         CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
#         CIBW_BUILD_VERBOSITY: 3
#         CIBW_ARCHS_WINDOWS: AMD64 #auto ARM64
#         CIBW_ARCHS_LINUX: x86_64 #"auto aarch64" #x86_64 # On an Linux Intel runner, build Intel and ARM wheels
#         #CIBW_ARCHS_MACOS: arm64 #x86_64    # x86_64 #universal2 
#         #CIBW_PLATFORM_TAG_MACOS: "macosx_14_0" #"macosx_13_0"
#         CIBW_ARCHS_MACOS: ${{ matrix.arch }}
#         CIBW_PLATFORM_TAG_MACOS: ${{ matrix.os == 'macos-14' && 'macosx_14_0' || 'macosx_13_0' }}

#         CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
#         CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:/Windows/System32 --add-path C:/vcpkg/installed/x64-windows/bin -w {dest_dir} {wheel}"
#         CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-listdeps {wheel} && DYLD_LIBRARY_PATH=/Users/runner/protobuf3/lib delocate-wheel -w {dest_dir} -v {wheel}"

#         # CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || '' }}
#         # CMAKE_ARGS:                  ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows' || '' }}
       
#         CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || startsWith(matrix.os, 'macos') && '-DProtobuf_ROOT=/Users/runner/protobuf3;-DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf3/bin/protoc;-DCMAKE_PREFIX_PATH=/Users/runner/protobuf3;-DCMAKE_INCLUDE_PATH=/Users/runner/protobuf3/include;-DCMAKE_LIBRARY_PATH=/Users/runner/protobuf3/lib' || '' }}

#         CMAKE_ARGS: ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows' || startsWith(matrix.os, 'macos') && '-DProtobuf_ROOT=/Users/runner/protobuf3 -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf3/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf3 -DCMAKE_INCLUDE_PATH=/Users/runner/protobuf3/include -DCMAKE_LIBRARY_PATH=/Users/runner/protobuf3/lib' || '' }}


#         CIBW_ENVIRONMENT_WINDOWS: |
#           BOOST_ROOT=C:/vcpkg/installed/x64-windows
#           BOOST_INCLUDEDIR=C:/vcpkg/installed/x64-windows/include
#           BOOST_LIBRARYDIR=C:/vcpkg/installed/x64-windows/lib
#         CIBW_ENVIRONMENT_MACOS: |
#           BOOST_ROOT=${{ steps.install-boost.outputs.BOOST_ROOT }}
#           MACOSX_DEPLOYMENT_TARGET=14.0
#           PROTOBUF_ROOT=/Users/runner/protobuf3
#           PROTOBUF_INCLUDEDIR=/Users/runner/protobuf3/include
#           PROTOBUF_LIBRARYDIR=/Users/runner/protobuf3/lib
#           Protobuf_ROOT=/Users/runner/protobuf3
#           Protobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf3/bin/protoc
#           CMAKE_PREFIX_PATH=/Users/runner/protobuf3
#           CMAKE_INCLUDE_PATH=/Users/runner/protobuf3/include
#           CMAKE_LIBRARY_PATH=/Users/runner/protobuf3/lib
#           CXXFLAGS="-I/Users/runner/protobuf3/include"
#           LDFLAGS="-L/Users/runner/protobuf3/lib"
#           PATH=/Users/runner/protobuf3/bin:$PATH
#         # CIBW_BEFORE_ALL_MACOS: |
#         #     # OpenMP dependencies for MacOS
#         #     set -x
#         #     echo "---------------------DEBUG------------------------------"
#         #     brew update
#         #     brew install gcc llvm libomp 
#         #     brew uninstall protobuf
#         #     brew install protobuf@3
#         #     brew link --force protobuf@3
#         #     brew install boost
#         #     brew link --force boost
#         #     brew list
#         #     DETECTED_ARCH=$(uname -m)
#         #     echo "Detected architecture: $DETECTED_ARCH"
         
#         #     export BOOST_ROOT=$(brew --prefix boost)
#         #     export CXXFLAGS="-I$BOOST_ROOT/include -I$(brew --prefix protobuf)/include"
#         #     export LDFLAGS="-L$BOOST_ROOT/lib -L$(brew --prefix protobuf)/lib"
#         #     # export CXXFLAGS="-I$(brew --prefix protobuf)/include"
#         #     # export LDFLAGS="-L$(brew --prefix protobuf)/lib"
#         #     echo "Protobuf installed at $(brew --prefix protobuf)"
#         #     protoc --version
#         #     echo "--------------------END DEBUG --------------------------"	
#         #     set +x
        
#         CIBW_BEFORE_ALL_MACOS: |
#           # OpenMP + Protobuf + Boost dependencies for macOS
#           set -x
#           echo "--------------------- DEBUG ------------------------------"
   
#           brew update
#           brew install gcc llvm libomp boost
#           brew link --force boost
          
#           # Install Protobuf v3.21.12 manually from source
#           brew uninstall protobuf 
#           sudo rm -rf /opt/homebrew/include/google/protobuf 
#           sudo rm -rf /opt/homebrew/lib/libprotobuf* 

#           git clone -b v3.21.12 https://github.com/protocolbuffers/protobuf.git
#           cd protobuf

#           git submodule update --init --recursive
#           mkdir build && cd build
#           cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/Users/runner/protobuf3
#           make -j2
#           make install
#           echo "PROTOBUF_ROOT=/Users/runner/protobuf3" >> $GITHUB_ENV
#           echo "PROTOBUF_ROOT=/Users/runner/protobuf3" >> $GITHUB_OUTPUT
        

#           # Set environment variables for CMake and compiler
#           export BOOST_ROOT=$(brew --prefix boost)
#           export PROTOBUF_ROOT=/Users/runner/protobuf3
#           export CXXFLAGS="-I$BOOST_ROOT/include -I$PROTOBUF_ROOT/include"
#           export LDFLAGS="-L$BOOST_ROOT/lib -L$PROTOBUF_ROOT/lib"

#           # Add protobuf binaries to PATH and verify installation
#           export PATH="$PROTOBUF_ROOT/bin:$PATH"
#           export LD_LIBRARY_PATH="$PROTOBUF_ROOT/lib:$LD_LIBRARY_PATH"
#           protoc --version || echo "Protobuf not found!"

#           echo "--------------------- END DEBUG --------------------------"
#           set +x

#         CIBW_BEFORE_ALL_LINUX: |
#           # Install Boost
#           set -x
#           yum install -y epel-release autoconf automake libtool gcc gcc-c++ make unzip wget &&
#           #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.tar.gz &&
#           wget -O boost_1_86_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download &&
#           tar -xzf boost_1_86_0.tar.gz &&
#           cd boost_1_86_0 &&
#           ./bootstrap.sh &&
#           ./b2 install &&
#           cd .. &&
#           # Install dependencies using yum
          
#           export CMAKE_CXX_STANDARD=20 &&
#           # Download and build Protobuf
#           curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip &&
#           unzip protoc-21.12-linux-x86_64.zip -d /usr/local/ &&
#           curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz &&
#           tar -xzf protobuf-all-21.12.tar.gz &&
#           cd protobuf-21.12 &&
#           ./configure  &&
#           make -j$(nproc) &&
#           make install &&
#           export PATH="/usr/local/bin:$PATH" &&
#           export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" &&
#           export CMAKE_PREFIX_PATH="/usr/local" &&
#           ldconfig &&
#           # Debug Protobuf installation
#           protoc --version || echo "Protoc not found"
#           ls /usr/local/include/google/protobuf || echo "Protobuf headers not found"
#           ls /usr/local/lib | grep protobuf || echo "Protobuf libraries not found"
#           set +x

#         CMAKE_CXX_STANDARD: 20




#     - name: Verify clean directory
#       run: git diff --exit-code --ignore-submodules
#       shell: bash

#     # - uses: actions/upload-artifact@v4
#     #   with:
#     #     name: cibw-wheels-${{ matrix.os }}
#     #     path: wheelhouse/*.whl
#     - uses: actions/upload-artifact@v4
#       with:
#         name: cibw-wheels-${{ matrix.os }}-${{ matrix.arch }}
#         path: wheelhouse/*.whl




