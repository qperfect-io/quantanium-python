name: Wheels

#on:
#  workflow_call:
on:
  push:
    branches:
      - devel

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.QUANTANIUM_READ_PAT }}

    - name: Install boost
      uses: MarkusJx/install-boost@v2.4.5
      id: install-boost
      with:
          # REQUIRED: Specify the required boost version
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          boost_version: 1.86.0

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:  # IMPORTANT: macos-13 is an intel runner, macos-14 is apple silicon
        os: [macos-14, windows-latest] #, ubuntu-latest, macos-14]    # [ubuntu-latest, macos-13]#, windows-latest]
 
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        token: ${{ secrets.QUANTANIUM_READ_PAT }}
        
    - name: Check Architecture
      run: |
        set -x
        echo "Detected architecture:"
        uname -m
        set +x
      shell: bash

    - name: Install Boost (Cross-OS)
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt update && sudo apt install -y libboost-all-dev protobuf-compiler libprotobuf-dev 
        elif [[ "${{ matrix.os }}" == "macos-14" ]]; then
          brew install boost gcc llvm libomp protobuf
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          curl -L -o boost_1_86_0.zip https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.zip/download
          unzip boost_1_86_0.zip -d C:/Boost
          set BOOST_ROOT=C:/Boost/boost_1_86_0
          #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.zip
          #unzip boost_1_86_0.zip
        fi
      shell: bash



   # - uses: astral-sh/setup-uv@v4
   # - name: Update Submodules to Latest Commit
   #   run: |
   #     git submodule sync
   #     git submodule update --init --recursive
   #     git submodule update --recursive --remote 
   #     git -C libs/quantanium fetch origin main
   #     git -C libs/quantanium reset --hard origin/main  # Reset to latest commit
          
        # Verify the commit hash
   #     echo "Updated libs/quantanium to commit:"
   #     git -C libs/quantanium rev-parse HEAD

   
    - name: Check Submodule Commits 
      run: |
        echo "Submodule commits AFTER update:"
        git submodule status
 

    - uses: pypa/cibuildwheel@v2.22
      env:
        CIBW_ENABLE: cpython-prerelease
        CIBW_SKIP: cp*-musllinux* cp*-win_arm64*
        CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313*-"
        CIBW_BUILD_VERBOSITY: 3
        CIBW_ARCHS_WINDOWS: AMD64 #auto ARM64
        CIBW_ARCHS_LINUX: x86_64 #"auto aarch64" #x86_64 # On an Linux Intel runner, build Intel and ARM wheels
        CIBW_ARCHS_MACOS: arm64 #x86_64    # x86_64 #universal2 
        CIBW_PLATFORM_TAG_MACOS: "macosx_14_0" #"macosx_13_0"
        
        CIBW_BEFORE_BUILD: |
          # python -m pip install cmake
       
        CIBW_BEFORE_ALL_WINDOWS: |
            echo "----- INSTALLING BOOST AND PROTOBUF VIA VCPKG -----"
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            .\bootstrap-vcpkg.bat
            .\vcpkg.exe install protobuf:x64-windows
            .\vcpkg.exe install boost-program-options:x64-windows
            .\vcpkg.exe install boost-serialization:x64-windows
            .\vcpkg.exe install boost-log:x64-windows
            $protocPath = "$(Get-Location)\installed\x64-windows\tools\protobuf"
            $env:PATH = "$protocPath;$env:PATH"
            echo "----- INSTALL COMPLETE -----"
            echo "VCPKG_ROOT=$PWD" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "CMAKE_TOOLCHAIN_FILE=$PWD\scripts\buildsystems\vcpkg.cmake" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        CIBW_BEFORE_ALL_MACOS: |
            # OpenMP dependencies for MacOS
            set -x
            echo "---------------------DEBUG------------------------------"
            brew update
            brew install gcc llvm libomp 
            brew uninstall protobuf
            brew install protobuf@3
            brew link --force protobuf@3
            brew install boost
            brew link --force boost
            brew list
            DETECTED_ARCH=$(uname -m)
            echo "Detected architecture: $DETECTED_ARCH"
         
            export BOOST_ROOT=$(brew --prefix boost)
            export CXXFLAGS="-I$BOOST_ROOT/include -I$(brew --prefix protobuf)/include"
            export LDFLAGS="-L$BOOST_ROOT/lib -L$(brew --prefix protobuf)/lib"
            # export CXXFLAGS="-I$(brew --prefix protobuf)/include"
            # export LDFLAGS="-L$(brew --prefix protobuf)/lib"
            echo "Protobuf installed at $(brew --prefix protobuf)"
            protoc --version
            echo "--------------------END DEBUG --------------------------"	
            set +x
        CIBW_BEFORE_ALL_LINUX: |
          # Install Boost
          set -x
          yum install -y epel-release autoconf automake libtool gcc gcc-c++ make unzip wget &&
          #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.tar.gz &&
          wget -O boost_1_86_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download &&
          tar -xzf boost_1_86_0.tar.gz &&
          cd boost_1_86_0 &&
          ./bootstrap.sh &&
          ./b2 install &&
          cd .. &&
          # Install dependencies using yum
          
          export CMAKE_CXX_STANDARD=20 &&
          # Download and build Protobuf
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip &&
          unzip protoc-21.12-linux-x86_64.zip -d /usr/local/ &&
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz &&
          tar -xzf protobuf-all-21.12.tar.gz &&
          cd protobuf-21.12 &&
          ./configure  &&
          make -j$(nproc) &&
          make install &&
          export PATH="/usr/local/bin:$PATH" &&
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" &&
          export CMAKE_PREFIX_PATH="/usr/local" &&
          ldconfig &&
          # Debug Protobuf installation
          protoc --version || echo "Protoc not found"
          ls /usr/local/include/google/protobuf || echo "Protobuf headers not found"
          ls /usr/local/lib | grep protobuf || echo "Protobuf libraries not found"
          set +x
        CMAKE_CXX_STANDARD: 20
        #CIBW_ENVIRONMENT_WINDOWS: BOOST_ROOT='${{ steps.install-boost.outputs.BOOST_ROOT }}'
        
   
        CIBW_ENVIRONMENT_WINDOWS: BOOST_ROOT=C:/Boost/boost_1_86_0 PATH=C:/Protobuf/bin

        CIBW_ENVIRONMENT_MACOS: BOOST_ROOT='${{ steps.install-boost.outputs.BOOST_ROOT }}' MACOSX_DEPLOYMENT_TARGET=14.0


    - name: Verify clean directory
      run: git diff --exit-code --ignore-submodules
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}
        path: wheelhouse/*.whl
