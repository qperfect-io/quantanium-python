name: Build_Core

on:
  workflow_call:
    inputs:
      matrix_os:
        required: true
        type: string
      matrix_arch:
        required: true
        type: string
      BOOST_ROOT:
        required: true
        type: string

env:
  FORCE_COLOR: 3

jobs:

  build_wheels:
    name: Wheels on ${{ inputs.matrix_os }}
    runs-on: ${{ inputs.matrix_os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        token: ${{ secrets.QUANTANIUM_READ_PAT }}
        
    - name: Check Architecture
      run: |
        set -x
        echo "Detected architecture:"
        uname -m
        set +x
      shell: bash

    - name: Install Boost (Cross-OS)
      run: |
        if [[ "${{ inputs.matrix_os }}" == "ubuntu-latest" ]]; then
          sudo apt update && sudo apt install -y libboost-all-dev protobuf-compiler libprotobuf-dev 
        elif [[ "${{ inputs.matrix_os }}" == "macos-*" ]]; then
          brew install boost gcc llvm libomp 
        # elif [[ "${{ inputs.matrix_os }}" == "windows-latest" ]]; then

        fi
      shell: bash

    - name: Install Boost on Windows via vcpkg
      if: inputs.matrix_os == 'windows-latest'
      run: |
        if (Test-Path 'C:\vcpkg') {
          Remove-Item -Recurse -Force 'C:\vcpkg'
        }
  
        git clone https://github.com/microsoft/vcpkg.git 'C:\vcpkg'
        Set-Location 'C:\vcpkg'
        .\bootstrap-vcpkg.bat

        if (-Not (Test-Path 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake')) {
          Write-Host 'ERROR: vcpkg.cmake not found!'
          exit 1
        }

        .\vcpkg.exe install protobuf:x64-windows
        .\vcpkg.exe install boost-program-options:x64-windows
        .\vcpkg.exe install boost-serialization:x64-windows
        .\vcpkg.exe install boost-log:x64-windows

      shell: pwsh
   
    - name: Check Submodule Commits 
      run: |
        echo "Submodule commits AFTER update:"
        git submodule status
 

    - uses: pypa/cibuildwheel@v2.22
      env:
        CIBW_ENABLE: cpython-prerelease
        CIBW_SKIP: cp*-musllinux* cp*-win_arm64*
        CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
        CIBW_BUILD_VERBOSITY: 3
        CIBW_ARCHS_WINDOWS: AMD64 #auto ARM64
        CIBW_ARCHS_LINUX: x86_64 #"auto aarch64" #x86_64 # On an Linux Intel runner, build Intel and ARM wheels
        CIBW_ARCHS_MACOS: ${{ inputs.matrix_arch }}
        CIBW_PLATFORM_TAG_MACOS: ${{ inputs.matrix_os == 'macos-14' && 'macosx_14_0' || 'macosx_13_0' }}

        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:/Windows/System32 --add-path C:/vcpkg/installed/x64-windows/bin -w {dest_dir} {wheel}"
    




        #CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ inputs.matrix_os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || '' }}
        #CMAKE_ARGS:                  ${{ inputs.matrix_os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows' || (inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14'|| inputs.matrix_os == 'macos-13-xlarge') && '-DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf' || '' }}
        #CIBW_CMAKE_CONFIGURE_OPTIONS: ${{ inputs.matrix_os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows' || (inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14'|| inputs.matrix_os == 'macos-13-xlarge') && '-DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -CMAKE_PREFIX_PATH=/Users/runner/protobuf' || '' }}
        CMAKE_ARGS: |
          ${{
            (inputs.matrix_os == 'windows-latest' && 
              '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows') || 
            ((inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14' || inputs.matrix_os == 'macos-13-xlarge') && 
              '-DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf') || 
            ''
          }}

        CIBW_CMAKE_CONFIGURE_OPTIONS: |
          ${{
            (inputs.matrix_os == 'windows-latest' && 
              '-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows') || 
            ((inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14' || inputs.matrix_os == 'macos-13-xlarge') && 
              '-DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -CMAKE_PREFIX_PATH=/Users/runner/protobuf') || 
            ''
          }}


        CIBW_ENVIRONMENT_WINDOWS: |
          BOOST_ROOT=C:/vcpkg/installed/x64-windows
          BOOST_INCLUDEDIR=C:/vcpkg/installed/x64-windows/include
          BOOST_LIBRARYDIR=C:/vcpkg/installed/x64-windows/lib

            
        CIBW_BEFORE_ALL_MACOS: |
            # OpenMP dependencies for MacOS
            set -x
            echo "---------------------DEBUG------------------------------"
            brew update
            brew install gcc llvm libomp 
   
          
            git clone -b v3.21.12 https://github.com/protocolbuffers/protobuf.git
            cd protobuf

            git submodule update --init --recursive
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED_LIBS=ON \
                -Dprotobuf_BUILD_CMAKE_CONFIG=ON \
                -DCMAKE_INSTALL_PREFIX=/Users/runner/protobuf 
            make -j2
            make install


   
            brew install boost
            brew link --force boost
            brew list

            export BOOST_ROOT=$(brew --prefix boost)
            export CXXFLAGS="-I$BOOST_ROOT/include -I/Users/runner/protobuf/include"
            export LDFLAGS="-L$BOOST_ROOT/lib -L/Users/runner/protobuf/lib"
            DETECTED_ARCH=$(uname -m)
            echo "Detected architecture: $DETECTED_ARCH"
            export PATH="/Users/runner/protobuf/bin:$PATH" &&
            export DYLD_LIBRARY_PATH="/Users/runner/protobuf/lib:$DYLD_LIBRARY_PATH" &&
            export CMAKE_PREFIX_PATH="/Users/runner/protobuf" &&
            protoc --version
            echo "Checking protobuf version"
            ls -l /Users/runner/protobuf3/include/google/protobuf/stubs/common.h
            cat /Users/runner/protobuf3/include/google/protobuf/stubs/common.h | head -n 10
            echo "--------------------END DEBUG --------------------------"	
            set +x
        
        CIBW_BEFORE_ALL_LINUX: |
          # Install Boost
          set -x
          yum install -y epel-release autoconf automake libtool gcc gcc-c++ make unzip wget &&
          #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.tar.gz &&
          wget -O boost_1_86_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download &&
          tar -xzf boost_1_86_0.tar.gz &&
          cd boost_1_86_0 &&
          ./bootstrap.sh &&
          ./b2 install &&
          cd .. &&
          # Install dependencies using yum
          
          export CMAKE_CXX_STANDARD=20 &&
          # Download and build Protobuf
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip &&
          unzip protoc-21.12-linux-x86_64.zip -d /usr/local/ &&
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz &&
          tar -xzf protobuf-all-21.12.tar.gz &&
          cd protobuf-21.12 &&
          ./configure  &&
          make -j$(nproc) &&
          make install &&
          export PATH="/usr/local/bin:$PATH" &&
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" &&
          export CMAKE_PREFIX_PATH="/usr/local" &&
          ldconfig &&
          # Debug Protobuf installation
          protoc --version || echo "Protoc not found"
          ls /usr/local/include/google/protobuf || echo "Protobuf headers not found"
          ls /usr/local/lib | grep protobuf || echo "Protobuf libraries not found"
          set +x
      
  

        CMAKE_CXX_STANDARD: 20
        CIBW_ENVIRONMENT_MACOS: BOOST_ROOT='${{ inputs.BOOST_ROOT }}' MACOSX_DEPLOYMENT_TARGET=${{ inputs.matrix_os == 'macos-14' && '14.0' || '13.0' }} DYLD_LIBRARY_PATH=/Users/runner/protobuf/lib:$DYLD_LIBRARY_PATH  CMAKE_PREFIX_PATH=/Users/runner/protobuf CXXFLAGS="-I/Users/runner/protobuf/include -I$(brew --prefix boost)/include"  LDFLAGS="-L/Users/runner/protobuf/lib -L$(brew --prefix boost)/lib" 

      
     

    - name: Verify clean directory
      run: git diff --exit-code --ignore-submodules
      shell: bash


    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ inputs.matrix_os }}-${{ inputs.matrix_arch }}
        path: wheelhouse/*.whl




    # - name: Install and test built wheel
    #   if: startsWith(inputs.matrix_os, 'macos')
    #   run: |
    #     echo "== Listing wheelhouse =="
    #     ls -lh wheelhouse/

    #     WHEEL=$(ls wheelhouse/quantanium-*.whl | head -n 1)
    #     echo "Installing $WHEEL..."

    #     python3 -m venv testenv
    #     source testenv/bin/activate

    #     python -m pip install --upgrade pip
    #     python -m pip install "$WHEEL"

    #     echo "Testing Python import..."
    #     python -c "import quantanium; print('quantanium import OK')"
    #     python -c "import quantanium._core; print('quantanium._core import OK')"



