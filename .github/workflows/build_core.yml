name: Build_Core

on:
  workflow_call:
    inputs:
      matrix_os:
        required: true
        type: string
      matrix_arch:
        required: true
        type: string


env:
  FORCE_COLOR: 3

jobs:

  build_wheels:
    name: Wheels on ${{ inputs.matrix_os }}
    runs-on: ${{ inputs.matrix_os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        token: ${{ secrets.QUANTANIUM_READ_PAT }}
        
    - name: Check Architecture
      run: |
        set -x
        echo "Detected architecture:"
        uname -m
        set +x
      shell: bash

    - name: Install Boost (Cross-OS)
      id: boost_prefix
      run: |
 
        if [[ "${{ inputs.matrix_os }}" == "macos-14" ]]; then

          brew update
          brew install boost gcc llvm libomp 
          brew link --force boost
      
          prefix="$(brew --prefix boost)"
          echo "boost_root=$prefix" >> "$GITHUB_OUTPUT"  
        fi
      
      shell: bash

    - name: Install python for GPUs
      if: inputs.matrix_os == 'LinuxGPU'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Instaill pipx and cibuildwhell + ensure path for GPUs
      if: inputs.matrix_os == 'LinuxGPU'
      run: |
        # 1. Ensure basic tools are up-to-date
        python -m ensurepip --upgrade
        python -m pip install --upgrade pip setuptools wheel
        
        # 2. Install and upgrade pipx (often used by the cibuildwheel action internally)
        python -m pip install pipx
        python -m pipx ensurepath
        
        # 3. Use pipx to install the latest cibuildwheel
        # This is a fallback/belt-and-suspenders measure, 
        # but often fixes path-related issues on non-standard runners.
        pipx install cibuildwheel


    - name: Install Boost on Windows via vcpkg
      if: inputs.matrix_os == 'windows-latest'
      run: |
        if (Test-Path 'C:\vcpkg') {
          Remove-Item -Recurse -Force 'C:\vcpkg'
        }
  
        git clone https://github.com/microsoft/vcpkg.git 'C:\vcpkg'
        Set-Location 'C:\vcpkg'
        .\bootstrap-vcpkg.bat

        if (-Not (Test-Path 'C:\vcpkg\scripts\buildsystems\vcpkg.cmake')) {
          Write-Host 'ERROR: vcpkg.cmake not found!'
          exit 1
        }

        .\vcpkg.exe install protobuf:x64-windows
        .\vcpkg.exe install boost-program-options:x64-windows
        .\vcpkg.exe install boost-serialization:x64-windows
        .\vcpkg.exe install boost-log:x64-windows

      shell: pwsh
   
    - name: Check Submodule Commits 
      run: |
        echo "Submodule commits AFTER update:"
        git submodule status

    - name: Retrograde cmake
      run: python -m pip install ninja cmake~=3.24.3 auditwheel
 

    - uses: pypa/cibuildwheel@v2.22
      env:
        CUDACXX: /usr/local/cuda/bin/nvcc
        CUDAToolkit_ROOT: /usr/local/cuda
        CIBW_ENABLE: cpython-prerelease
        CIBW_SKIP: cp*-musllinux* cp*-win_arm64*
        CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
        CIBW_BUILD_VERBOSITY: 3
        CIBW_ARCHS_WINDOWS: AMD64 #auto ARM64
        CIBW_ARCHS_LINUX: x86_64 #"auto aarch64" #x86_64 # On an Linux Intel runner, build Intel and ARM wheels
        CIBW_ARCHS_MACOS: ${{ inputs.matrix_arch }}
        CIBW_PLATFORM_TAG_MACOS: ${{ inputs.matrix_os == 'macos-14' && 'macosx_14_0' || 'macosx_13_0' }}

        CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:/Windows/System32 --add-path C:/vcpkg/installed/x64-windows/bin -w {dest_dir} {wheel}"
        
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair --exclude libcuda.so.1 --exclude libcublas.so.12 --exclude libcublas-4cc45526.so.12.4.5.8 --exclude libcublasLt-44a813aa.so.12.4.5.8 {wheel} -w {dest_dir}"
    

        CMAKE_ARGS: |
          ${{
            (inputs.matrix_os == 'windows-latest' && 
              '-DQUANTANIUMPY_WITH_CUDA=OFF -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows') || 
            ((inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14' || inputs.matrix_os == 'macos-13-xlarge') && 
              '-DQUANTANIUMPY_WITH_CUDA=OFF -DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -DCMAKE_PREFIX_PATH=/Users/runner/protobuf:${{ steps.boost_prefix.outputs.boost_root }} -DBoost_INCLUDE_DIR=${{ steps.boost_prefix.outputs.boost_root }}/include -DBoost_LIBRARY_DIR=${{ steps.boost_prefix.outputs.boost_root }}/lib') || 
            ((inputs.matrix_os == 'LinuxGPU' || inputs.matrix_os == 'ubuntu-latest') && 
              '-DQUANTANIUMPY_WITH_CUDA=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCUDAToolkit_ROOT=/usr/local/cuda -DCMAKE_SKIP_RPATH=ON') ||
            ''
          }}

        CIBW_CMAKE_CONFIGURE_OPTIONS: |
          ${{
            (inputs.matrix_os == 'windows-latest' && 
              '-DQUANTANIUMPY_WITH_CUDA=OFF -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows') || 
            ((inputs.matrix_os == 'macos-13' || inputs.matrix_os == 'macos-14' || inputs.matrix_os == 'macos-13-xlarge') && 
              '-DQUANTANIUMPY_WITH_CUDA=OFF -DProtobuf_ROOT=/Users/runner/protobuf -DProtobuf_INCLUDE_DIR=/Users/runner/protobuf/include -DProtobuf_LIBRARIES=/Users/runner/protobuf/lib/libprotobuf.dylib -DProtobuf_PROTOC_EXECUTABLE=/Users/runner/protobuf/bin/protoc -CMAKE_PREFIX_PATH=/Users/runner/protobuf:${{ steps.boost_prefix.outputs.boost_root }} -DBoost_INCLUDE_DIR=${{ steps.boost_prefix.outputs.boost_root }}/include -DBoost_LIBRARY_DIR=${{ steps.boost_prefix.outputs.boost_root }}/lib') ||
            ((inputs.matrix_os == 'LinuxGPU' || inputs.matrix_os == 'ubuntu-latest') && 
              '-DQUANTANIUMPY_WITH_CUDA=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCUDAToolkit_ROOT=/usr/local/cuda -DCMAKE_SKIP_RPATH=ON') ||
            ''
          }}


        CIBW_ENVIRONMENT_WINDOWS: |
          BOOST_ROOT=C:/vcpkg/installed/x64-windows
          BOOST_INCLUDEDIR=C:/vcpkg/installed/x64-windows/include
          BOOST_LIBRARYDIR=C:/vcpkg/installed/x64-windows/lib

            
        CIBW_BEFORE_ALL_MACOS: |
            # OpenMP dependencies for MacOS
            set -x
            echo "---------------------DEBUG------------------------------"
   
          
            git clone -b v3.21.12 https://github.com/protocolbuffers/protobuf.git
            cd protobuf

            git submodule update --init --recursive
            mkdir build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED_LIBS=ON \
                -Dprotobuf_BUILD_CMAKE_CONFIG=ON \
                -DCMAKE_INSTALL_PREFIX=/Users/runner/protobuf 
            make -j2
            make install
            echo "--------------------END DEBUG --------------------------"	
            set +x
        
        CIBW_BEFORE_ALL_LINUX: |
          # Install cmake
          python -m pip install ninja cmake~=3.24.3 auditwheel

          # Install Boost
          set -x
          yum install -y epel-release autoconf automake libtool gcc gcc-c++ make unzip wget &&
          #curl -LO https://boostorg.jfrog.io/artifactory/main/release/1.86.0/source/boost_1_86_0.tar.gz &&
          wget -O boost_1_86_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download &&
          tar -xzf boost_1_86_0.tar.gz &&
          cd boost_1_86_0 &&
          ./bootstrap.sh &&
          ./b2 install &&
          cd .. &&
          # Install dependencies using yum
          
          export CMAKE_CXX_STANDARD=20 &&
          # Download and build Protobuf
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip &&
          unzip protoc-21.12-linux-x86_64.zip -d /usr/local/ &&
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protobuf-all-21.12.tar.gz &&
          tar -xzf protobuf-all-21.12.tar.gz &&
          cd protobuf-21.12 &&
          ./configure  &&
          make -j$(nproc) &&
          make install &&
          export PATH="/usr/local/bin:$PATH" &&
          export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH" &&
          export CMAKE_PREFIX_PATH="/usr/local" &&
          ldconfig &&
          # # Debug Protobuf installation
          # protoc --version || echo "Protoc not found"
          # ls /usr/local/include/google/protobuf || echo "Protobuf headers not found"
          # ls /usr/local/lib | grep protobuf || echo "Protobuf libraries not found"
          set +x

          # SET CUDA
           echo "----------------------------CUDA INSTALL-----------------------------------------------"
          yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo
          yum clean all
          yum -y install nvidia-driver-latest-dkms
          yum -y install cuda-toolkit
          yum -y install cuquantum
          yum -y install custatevec

          export PATH=$PATH:/usr/local/cuda/bin
          export CMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc
          export CUDAToolkit_ROOT=/usr/local/cuda
          export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
          export CPATH=/usr/local/cuda/include:$CPATH

          # DEBUG
          echo "----------------------------CUDA DEBUG-----------------------------------------------"
          which nvcc
          nvcc --version
          ls /usr/local
          echo "-----------------"

          ls /usr/local/cuda/bin

          # compiler debug
          echo -------------------------------- Compiler debug-------------------------
          ls /usr/bin 
          which gcc

        CIBW_ENVIRONMENT_LINUX: >
            CMAKE_ARGS="-DQUANTANIUM_WITH_CUDA=ON -DQUANTANIUM_WITH_CUQUANTUM=ON -DQUANTANIUM_USE_CUDA=ON -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCMAKE_CUDA_ARCHITECTURES=70;75;80;86;89;90 -DCMAKE_SKIP_RPATH=ON "
            CUDAToolkit_ROOT="/usr/local/cuda"
            CUDACXX="/usr/local/cuda/bin/nvcc"
            LIBRARY_PATH=/usr/local/cuda/lib64:$LIBRARY_PATH
            LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
            CFLAGS="-I/usr/local/cuda/include $CFLAGS"
            CPATH="/usr/local/cuda/include:$CPATH"



        CMAKE_CXX_STANDARD: 20
        CIBW_ENVIRONMENT_MACOS: BOOST_ROOT=${{ steps.boost_prefix.outputs.boost_root }} CMAKE_PREFIX_PATH=/Users/runner/protobuf:${{ steps.boost_prefix.outputs.boost_root }} CXXFLAGS="-I${{ steps.boost_prefix.outputs.boost_root }}/include" LDFLAGS="-L${{ steps.boost_prefix.outputs.boost_root }}/lib" MACOSX_DEPLOYMENT_TARGET=${{ inputs.matrix_os == 'macos-14' && '14.0' || '13.0' }} DYLD_LIBRARY_PATH=/Users/runner/protobuf/lib:$DYLD_LIBRARY_PATH  CMAKE_PREFIX_PATH=/Users/runner/protobuf CXXFLAGS="-I/Users/runner/protobuf/include -I${{ steps.boost_prefix.outputs.boost_root }}/include"  LDFLAGS="-L/Users/runner/protobuf/lib -L${{ steps.boost_prefix.outputs.boost_root }}/lib" 

      
     

    - name: Verify clean directory
      run: git diff --exit-code --ignore-submodules
      shell: bash


    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ inputs.matrix_os }}-${{ inputs.matrix_arch }}
        path: wheelhouse/*.whl



